// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__CANVAS_INL
#define AOSLCPP_AOSL__CANVAS_INL

// Begin prologue.
//
//
// End prologue.

#include "aosl/spatial_area.hpp"
#include "aosl/spatial_area.inl"

#include "aosl/layers.hpp"
#include "aosl/layers.inl"

#include "aosl/object_list.hpp"
#include "aosl/object_list.inl"

#include "aosl/color.hpp"
#include "aosl/color.inl"

namespace aosl
{
  // Canvas
  // 

  inline
  const Canvas::AreaType& Canvas::
  area () const
  {
    return this->area_.get ();
  }

  inline
  Canvas::AreaType& Canvas::
  area ()
  {
    return this->area_.get ();
  }

  inline
  void Canvas::
  area (const AreaType& x)
  {
    this->area_.set (x);
  }

  inline
  void Canvas::
  area (::std::auto_ptr< AreaType > x)
  {
    this->area_.set (x);
  }

  inline
  const Canvas::LayersOptional& Canvas::
  layers () const
  {
    return this->layers_;
  }

  inline
  Canvas::LayersOptional& Canvas::
  layers ()
  {
    return this->layers_;
  }

  inline
  void Canvas::
  layers (const LayersType& x)
  {
    this->layers_.set (x);
  }

  inline
  void Canvas::
  layers (const LayersOptional& x)
  {
    this->layers_ = x;
  }

  inline
  void Canvas::
  layers (::std::auto_ptr< LayersType > x)
  {
    this->layers_.set (x);
  }

  inline
  const Canvas::ObjectsType& Canvas::
  objects () const
  {
    return this->objects_.get ();
  }

  inline
  Canvas::ObjectsType& Canvas::
  objects ()
  {
    return this->objects_.get ();
  }

  inline
  void Canvas::
  objects (const ObjectsType& x)
  {
    this->objects_.set (x);
  }

  inline
  void Canvas::
  objects (::std::auto_ptr< ObjectsType > x)
  {
    this->objects_.set (x);
  }

  inline
  const Canvas::ColorType& Canvas::
  color () const
  {
    return this->color_.get ();
  }

  inline
  Canvas::ColorType& Canvas::
  color ()
  {
    return this->color_.get ();
  }

  inline
  void Canvas::
  color (const ColorType& x)
  {
    this->color_.set (x);
  }

  inline
  void Canvas::
  color (::std::auto_ptr< ColorType > x)
  {
    this->color_.set (x);
  }

  inline
  const Canvas::ColorType& Canvas::
  color_default_value ()
  {
    return color_default_value_;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__CANVAS_INL
