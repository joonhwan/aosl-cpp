// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

/**
 * @file
 * @brief Generated from extension.xsd.
 */

#ifndef AOSLCPP_AOSL__EXTENSION_HPP
#define AOSLCPP_AOSL__EXTENSION_HPP

// Begin prologue.
//

#include <aoslcpp/common.hpp>

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "aosl/extension_forward.hpp"

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#undef XSD_DONT_INCLUDE_INLINE
#else

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %artofsequence.org/aosl/1.0
 * schema namespace.
 */
namespace aosl
{
  /**
   * @brief Class corresponding to the %extension schema type.
   *
   * Free node that allow for extension to add interpreter-specific
   * informations or new non-standard language features.
   *
   * @nosubgrouping
   */
  class Extension: public ::xml_schema::Type
  {
    public:
    /**
     * @name any
     *
     * @brief Accessor and modifier functions for the any wildcard.
     */
    //@{

    /**
     * @brief DOM element sequence container type.
     */
    typedef ::xsd::cxx::tree::element_sequence AnySequence;

    /**
     * @brief DOM element iterator type.
     */
    typedef AnySequence::iterator AnyIterator;

    /**
     * @brief DOM element constant iterator type.
     */
    typedef AnySequence::const_iterator AnyConstIterator;

    /**
     * @brief Return a read-only (constant) reference to the wildcard
     * element sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const AnySequence&
    any () const;

    /**
     * @brief Return a read-write reference to the wildcard element
     * sequence.
     *
     * @return A reference to the sequence container.
     */
    AnySequence&
    any ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds
     * it to the wildcard element sequence. Note that this operation
     * completely changes the sequence and all old elements will be
     * lost.
     */
    void
    any (const AnySequence& s);

    //@}

    /**
     * @name any_attribute
     *
     * @brief Accessor and modifier functions for the anyAttribute
     * wildcard.
     */
    //@{

    /**
     * @brief DOM attribute set container type.
     */
    typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;

    /**
     * @brief DOM attribute iterator type.
     */
    typedef AnyAttributeSet::iterator AnyAttributeIterator;

    /**
     * @brief DOM attribute constant iterator type.
     */
    typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

    /**
     * @brief Return a read-only (constant) reference to the
     * attribute set.
     *
     * @return A constant reference to the set container.
     */
    const AnyAttributeSet&
    any_attribute () const;

    /**
     * @brief Return a read-write reference to the attribute set.
     *
     * @return A reference to the set container.
     */
    AnyAttributeSet&
    any_attribute ();

    /**
     * @brief Copy attributes from a given set.
     *
     * @param s A set to copy elements from.
     *
     * For each attribute in @a s this function makes a copy and adds
     * it to the set. Note that this operation completely changes the 
     * set and all old attributes will be lost.
     */
    void
    any_attribute (const AnyAttributeSet& s);

    //@}

    /**
     * @brief Return a read-only (constant) reference to the DOM
     * document associated with this instance.
     *
     * @return A constant reference to the DOM document.
     *
     * The DOM document returned by this function is used to store
     * the raw XML content corresponding to wildcards.
     */
    const ::xercesc::DOMDocument&
    dom_document () const;

    /**
     * @brief Return a read-write reference to the DOM document
     * associated with this instance.
     *
     * @return A reference to the DOM document.
     *
     * The DOM document returned by this function is used to store
     * the raw XML content corresponding to wildcards.
     */
    ::xercesc::DOMDocument&
    dom_document ();

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Extension ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Extension (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Extension (const Extension& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Extension*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Extension ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    AnySequence any_;
    AnyAttributeSet any_attribute_;

    //@endcond
  };

  bool
  operator== (const Extension&, const Extension&);

  bool
  operator!= (const Extension&, const Extension&);
}

#ifndef XSD_DONT_INCLUDE_INLINE

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream&, const Extension&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace aosl
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement&, const Extension&);
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "aosl/extension.inl"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__EXTENSION_HPP
