// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__LAYER_INL
#define AOSLCPP_AOSL__LAYER_INL

// Begin prologue.
//
//
// End prologue.

#include "aosl/extension.hpp"
#include "aosl/extension.inl"

#include "aosl/object_ref_element.hpp"
#include "aosl/object_ref_element.inl"

#include "aosl/layer_id.hpp"
#include "aosl/layer_id.inl"

namespace aosl
{
  // Layer
  // 

  inline
  const Layer::ExtensionOptional& Layer::
  extension () const
  {
    return this->extension_;
  }

  inline
  Layer::ExtensionOptional& Layer::
  extension ()
  {
    return this->extension_;
  }

  inline
  void Layer::
  extension (const ExtensionType& x)
  {
    this->extension_.set (x);
  }

  inline
  void Layer::
  extension (const ExtensionOptional& x)
  {
    this->extension_ = x;
  }

  inline
  void Layer::
  extension (::std::auto_ptr< ExtensionType > x)
  {
    this->extension_.set (x);
  }

  inline
  const Layer::ObjectSequence& Layer::
  object () const
  {
    return this->object_;
  }

  inline
  Layer::ObjectSequence& Layer::
  object ()
  {
    return this->object_;
  }

  inline
  void Layer::
  object (const ObjectSequence& s)
  {
    this->object_ = s;
  }

  inline
  const Layer::IdType& Layer::
  id () const
  {
    return this->id_.get ();
  }

  inline
  Layer::IdType& Layer::
  id ()
  {
    return this->id_.get ();
  }

  inline
  void Layer::
  id (const IdType& x)
  {
    this->id_.set (x);
  }

  inline
  void Layer::
  id (::std::auto_ptr< IdType > x)
  {
    this->id_.set (x);
  }

  inline
  const Layer::ActiveType& Layer::
  active () const
  {
    return this->active_.get ();
  }

  inline
  Layer::ActiveType& Layer::
  active ()
  {
    return this->active_.get ();
  }

  inline
  void Layer::
  active (const ActiveType& x)
  {
    this->active_.set (x);
  }

  inline
  Layer::ActiveType Layer::
  active_default_value ()
  {
    return ActiveType (true);
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__LAYER_INL
