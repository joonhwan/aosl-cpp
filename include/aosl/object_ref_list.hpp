// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

/**
 * @file
 * @brief Generated from object_ref_list.xsd.
 */

#ifndef AOSLCPP_AOSL__OBJECT_REF_LIST_HPP
#define AOSLCPP_AOSL__OBJECT_REF_LIST_HPP

// Begin prologue.
//

#include <aoslcpp/common.hpp>

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "aosl/object_ref_list_forward.hpp"

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "aosl/object_ref.hpp"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "aosl/object_ref.hpp"

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %artofsequence.org/aosl/1.0
 * schema namespace.
 */
namespace aosl
{
  /**
   * @brief List class corresponding to the %object_ref_list
   * schema type.
   *
   * This class has an interface of a standard C++ sequence (e.g.,
   * std::vector).
   *
   * List of references to Objects.
   */
  class Object_ref_list: public ::xml_schema::SimpleType,
    public ::xsd::cxx::tree::list< ::aosl::Object_ref, char >
  {
    public:
    /**
     * @brief Default constructor.
     *
     * Creates an empty list.
     */
    Object_ref_list ();

    /**
     * @brief Create a list with copies of the specified element.
     *
     * @param n A number of elements to copy.
     * @param x An element to copy.
     *
     * This constructor creates a list with @a n copies of @a x.
     */
    Object_ref_list (size_type n, const ::aosl::Object_ref& x);

    /**
     * @brief Create a list from an iterator range.
     *
     * @param begin An iterator pointing to the first element.
     * @param end An iterator pointing to the one past the last element.
     *
     * This constructor creates a list consisting of copies of the
     * elements in the range [begin,end).
     */
    template < typename I >
    Object_ref_list (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::aosl::Object_ref, char > (begin, end, this)
    {
    }

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Object_ref_list (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Object_ref_list (const ::xercesc::DOMAttr& a,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Object_ref_list (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Object_ref_list (const Object_ref_list& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Object_ref_list*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Destructor.
     */
    virtual 
    ~Object_ref_list ();
  };
}

#ifndef XSD_DONT_INCLUDE_INLINE

#include "aosl/object_ref.inl"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream&, const Object_ref_list&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace aosl
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement&, const Object_ref_list&);

  void
  operator<< (::xercesc::DOMAttr&, const Object_ref_list&);

  void
  operator<< (::xml_schema::ListStream&,
              const Object_ref_list&);
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "aosl/object_ref_list.inl"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__OBJECT_REF_LIST_HPP
