// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

/**
 * @file
 * @brief Generated from canvas.xsd.
 */

#ifndef AOSLCPP_AOSL__CANVAS_HPP
#define AOSLCPP_AOSL__CANVAS_HPP

// Begin prologue.
//

#include <aoslcpp/common.hpp>

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "aosl/canvas_forward.hpp"

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "aosl/spatial_area_forward.hpp"

#include "aosl/layers_forward.hpp"

#include "aosl/object_list_forward.hpp"

#include "aosl/color_forward.hpp"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "aosl/spatial_area_forward.hpp"

#include "aosl/layers_forward.hpp"

#include "aosl/object_list_forward.hpp"

#include "aosl/color_forward.hpp"

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %artofsequence.org/aosl/1.0
 * schema namespace.
 */
namespace aosl
{
  /**
   * @brief Class corresponding to the %canvas schema type.
   *
   * Canvas where the sequence plays and that gives the objects'
   * organisation.
   * The Canvas is a 3D graphical and audio space.
   * The depth dimension can be ignored by authors to focus on 2D but
   * should still be
   * managed by players in a way or another to allow authors to exploit it
   * where needed.
   *
   * @nosubgrouping
   */
  class Canvas: public ::xml_schema::Type
  {
    public:
    /**
     * @name area
     *
     * @brief Accessor and modifier functions for the %area
     * required element.
     *
     * Virtual dimensions of the canvas.
     * Each coordinate will be interpreted as the space to take on each axis,
     * x and y being the surface of the screen.
     * The coordinate system is right-handed, like in OpenGL.
     * The origin of the canvas space is in bottom-left of the screen, so +x
     * goes on the right, +y goes up.
     * 
     * The x and y informations will also allow the interpreter to
     * understand:
     * - the original screen ratio for the sequence
     * - the original screen resolution the sequence targeted
     * 
     * Those informations will allow the player implementation to adapt the
     * sequence to the
     * display in a more informed way.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::aosl::Spatial_area AreaType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AreaType, char > AreaTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AreaType&
    area () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AreaType&
    area ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    area (const AreaType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    area (::std::auto_ptr< AreaType > p);

    //@}

    /**
     * @name layers
     *
     * @brief Accessor and modifier functions for the %layers
     * optional element.
     *
     * Layers available in this canvas.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::aosl::Layers LayersType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< LayersType > LayersOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LayersType, char > LayersTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const LayersOptional&
    layers () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    LayersOptional&
    layers ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    layers (const LayersType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    layers (const LayersOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    layers (::std::auto_ptr< LayersType > p);

    //@}

    /**
     * @name objects
     *
     * @brief Accessor and modifier functions for the %objects
     * required element.
     *
     * Objects in this canvas, organized in hierarchical tree.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::aosl::Object_list ObjectsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ObjectsType, char > ObjectsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ObjectsType&
    objects () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ObjectsType&
    objects ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    objects (const ObjectsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    objects (::std::auto_ptr< ObjectsType > p);

    //@}

    /**
     * @name color
     *
     * @brief Accessor and modifier functions for the %color
     * optional attribute with a default value.
     *
     * Color used to fill the canvas (background color).
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::aosl::Color ColorType;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ColorType, char > ColorTraits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ColorType&
    color () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ColorType&
    color ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    color (const ColorType& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    color (::std::auto_ptr< ColorType > p);

    /**
     * @brief Return the default value for the attribute.
     *
     * @return A read-only (constant) reference to the attribute's
     * default value.
     */
    static const ColorType&
    color_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Canvas (const AreaType&,
            const ObjectsType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (auto_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Canvas (::std::auto_ptr< AreaType >&,
            ::std::auto_ptr< ObjectsType >&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Canvas (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Canvas (const Canvas& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Canvas*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Canvas ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< AreaType > area_;
    LayersOptional layers_;
    ::xsd::cxx::tree::one< ObjectsType > objects_;
    ::xsd::cxx::tree::one< ColorType > color_;
    static const ColorType color_default_value_;

    //@endcond
  };

  bool
  operator== (const Canvas&, const Canvas&);

  bool
  operator!= (const Canvas&, const Canvas&);
}

#ifndef XSD_DONT_INCLUDE_INLINE

#include "aosl/spatial_area.hpp"
#include "aosl/spatial_area.inl"

#include "aosl/layers.hpp"
#include "aosl/layers.inl"

#include "aosl/object_list.hpp"
#include "aosl/object_list.inl"

#include "aosl/color.hpp"
#include "aosl/color.inl"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream&, const Canvas&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace aosl
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement&, const Canvas&);
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "aosl/canvas.inl"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__CANVAS_HPP
