// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

#ifndef AOSLCPP_AOSL__STAGE_INL
#define AOSLCPP_AOSL__STAGE_INL

// Begin prologue.
//
//
// End prologue.

#include "aosl/navigation.hpp"
#include "aosl/navigation.inl"

#include "aosl/script.hpp"
#include "aosl/script.inl"

#include "aosl/extension.hpp"
#include "aosl/extension.inl"

#include "aosl/stage_id.hpp"
#include "aosl/stage_id.inl"

namespace aosl
{
  // Stage
  // 

  inline
  const Stage::NavigationOptional& Stage::
  navigation () const
  {
    return this->navigation_;
  }

  inline
  Stage::NavigationOptional& Stage::
  navigation ()
  {
    return this->navigation_;
  }

  inline
  void Stage::
  navigation (const NavigationType& x)
  {
    this->navigation_.set (x);
  }

  inline
  void Stage::
  navigation (const NavigationOptional& x)
  {
    this->navigation_ = x;
  }

  inline
  void Stage::
  navigation (::std::auto_ptr< NavigationType > x)
  {
    this->navigation_.set (x);
  }

  inline
  const Stage::ScriptOptional& Stage::
  script () const
  {
    return this->script_;
  }

  inline
  Stage::ScriptOptional& Stage::
  script ()
  {
    return this->script_;
  }

  inline
  void Stage::
  script (const ScriptType& x)
  {
    this->script_.set (x);
  }

  inline
  void Stage::
  script (const ScriptOptional& x)
  {
    this->script_ = x;
  }

  inline
  void Stage::
  script (::std::auto_ptr< ScriptType > x)
  {
    this->script_.set (x);
  }

  inline
  const Stage::ExtensionOptional& Stage::
  extension () const
  {
    return this->extension_;
  }

  inline
  Stage::ExtensionOptional& Stage::
  extension ()
  {
    return this->extension_;
  }

  inline
  void Stage::
  extension (const ExtensionType& x)
  {
    this->extension_.set (x);
  }

  inline
  void Stage::
  extension (const ExtensionOptional& x)
  {
    this->extension_ = x;
  }

  inline
  void Stage::
  extension (::std::auto_ptr< ExtensionType > x)
  {
    this->extension_.set (x);
  }

  inline
  const Stage::IdType& Stage::
  id () const
  {
    return this->id_.get ();
  }

  inline
  Stage::IdType& Stage::
  id ()
  {
    return this->id_.get ();
  }

  inline
  void Stage::
  id (const IdType& x)
  {
    this->id_.set (x);
  }

  inline
  void Stage::
  id (::std::auto_ptr< IdType > x)
  {
    this->id_.set (x);
  }

  inline
  ::std::auto_ptr< Stage::IdType > Stage::
  detach_id ()
  {
    return this->id_.detach ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // AOSLCPP_AOSL__STAGE_INL
