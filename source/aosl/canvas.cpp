// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/canvas.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Canvas
  //

  const Canvas::ColorType Canvas::color_default_value_ (
    "black");

  Canvas::
  Canvas (const AreaType& area,
          const ObjectsType& objects)
  : ::xml_schema::Type (),
    area_ (area, ::xml_schema::Flags (), this),
    layers_ (::xml_schema::Flags (), this),
    objects_ (objects, ::xml_schema::Flags (), this),
    color_ (color_default_value (), ::xml_schema::Flags (), this)
  {
  }

  Canvas::
  Canvas (::std::auto_ptr< AreaType >& area,
          ::std::auto_ptr< ObjectsType >& objects)
  : ::xml_schema::Type (),
    area_ (area, ::xml_schema::Flags (), this),
    layers_ (::xml_schema::Flags (), this),
    objects_ (objects, ::xml_schema::Flags (), this),
    color_ (color_default_value (), ::xml_schema::Flags (), this)
  {
  }

  Canvas::
  Canvas (const Canvas& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    area_ (x.area_, f, this),
    layers_ (x.layers_, f, this),
    objects_ (x.objects_, f, this),
    color_ (x.color_, f, this)
  {
  }

  Canvas::
  Canvas (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    area_ (f, this),
    layers_ (f, this),
    objects_ (f, this),
    color_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Canvas::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // area
      //
      if (n.name () == "area" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< AreaType > r (
          AreaTraits::create (i, f, this));

        if (!area_.present ())
        {
          this->area_.set (r);
          continue;
        }
      }

      // layers
      //
      if (n.name () == "layers" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< LayersType > r (
          LayersTraits::create (i, f, this));

        if (!this->layers_)
        {
          this->layers_.set (r);
          continue;
        }
      }

      // objects
      //
      if (n.name () == "objects" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< ObjectsType > r (
          ObjectsTraits::create (i, f, this));

        if (!objects_.present ())
        {
          this->objects_.set (r);
          continue;
        }
      }

      break;
    }

    if (!area_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "area",
        "artofsequence.org/aosl/1.0");
    }

    if (!objects_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "objects",
        "artofsequence.org/aosl/1.0");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "color" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ColorType > r (
          ColorTraits::create (i, f, this));

        this->color_.set (r);
        continue;
      }
    }

    if (!color_.present ())
    {
      this->color_.set (color_default_value ());
    }
  }

  Canvas* Canvas::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Canvas (*this, f, c);
  }

  Canvas::
  ~Canvas ()
  {
  }

  bool
  operator== (const Canvas& x, const Canvas& y)
  {
    if (!(x.area () == y.area ()))
      return false;

    if (!(x.layers () == y.layers ()))
      return false;

    if (!(x.objects () == y.objects ()))
      return false;

    if (!(x.color () == y.color ()))
      return false;

    return true;
  }

  bool
  operator!= (const Canvas& x, const Canvas& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Canvas& i)
  {
    o << ::std::endl << "area: " << i.area ();
    if (i.layers ())
    {
      o << ::std::endl << "layers: " << *i.layers ();
    }

    o << ::std::endl << "objects: " << i.objects ();
    o << ::std::endl << "color: " << i.color ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Canvas& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // area
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "area",
          "artofsequence.org/aosl/1.0",
          e));

      s << i.area ();
    }

    // layers
    //
    if (i.layers ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "layers",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.layers ();
    }

    // objects
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "objects",
          "artofsequence.org/aosl/1.0",
          e));

      s << i.objects ();
    }

    // color
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "color",
          e));

      a << i.color ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

