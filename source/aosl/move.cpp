// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/move.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Move
  //

  Move::
  Move (const FromType& from,
        const ToType& to,
        const IdType& id)
  : ::xml_schema::Type (),
    change_ (::xml_schema::Flags (), this),
    extension_ (::xml_schema::Flags (), this),
    from_ (from, ::xml_schema::Flags (), this),
    to_ (to, ::xml_schema::Flags (), this),
    id_ (id, ::xml_schema::Flags (), this),
    default__ (default_default_value (), ::xml_schema::Flags (), this)
  {
  }

  Move::
  Move (const Move& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    change_ (x.change_, f, this),
    extension_ (x.extension_, f, this),
    from_ (x.from_, f, this),
    to_ (x.to_, f, this),
    id_ (x.id_, f, this),
    default__ (x.default__, f, this)
  {
  }

  Move::
  Move (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    change_ (f, this),
    extension_ (f, this),
    from_ (f, this),
    to_ (f, this),
    id_ (f, this),
    default__ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Move::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // change
      //
      {
        ::xsd::cxx::tree::type_factory_map< char >& tfm (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          tfm.create (
            "change",
            "artofsequence.org/aosl/1.0",
            &::xsd::cxx::tree::factory_impl< ChangeType >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< ChangeType > r (
            dynamic_cast< ChangeType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->change_.push_back (r);
          continue;
        }
      }

      // extension
      //
      if (n.name () == "extension" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< ExtensionType > r (
          ExtensionTraits::create (i, f, this));

        if (!this->extension_)
        {
          this->extension_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "from" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< FromType > r (
          FromTraits::create (i, f, this));

        this->from_.set (r);
        continue;
      }

      if (n.name () == "to" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ToType > r (
          ToTraits::create (i, f, this));

        this->to_.set (r);
        continue;
      }

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "default" && n.namespace_ ().empty ())
      {
        this->default__.set (DefaultTraits::create (i, f, this));
        continue;
      }
    }

    if (!from_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "from",
        "");
    }

    if (!to_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "to",
        "");
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!default__.present ())
    {
      this->default__.set (default_default_value ());
    }
  }

  Move* Move::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Move (*this, f, c);
  }

  Move::
  ~Move ()
  {
  }

  bool
  operator== (const Move& x, const Move& y)
  {
    {
      ::xsd::cxx::tree::comparison_map< char >& cm (
        ::xsd::cxx::tree::comparison_map_instance< 0, char > ());

      Move::ChangeSequence a (x.change ()), b (y.change ());

      if (a.size () != b.size ())
        return false;

      for (Move::ChangeConstIterator
           ai (a.begin ()), bi (b.begin ()), ae (a.end ()), be (b.end ());
           ai != ae; ++ai, ++bi)
      {
        if (!cm.compare (*ai, *bi))
          return false;
      }
    }

    if (!(x.extension () == y.extension ()))
      return false;

    if (!(x.from () == y.from ()))
      return false;

    if (!(x.to () == y.to ()))
      return false;

    if (!(x.id () == y.id ()))
      return false;

    if (!(x.default_ () == y.default_ ()))
      return false;

    return true;
  }

  bool
  operator!= (const Move& x, const Move& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Move& i)
  {
    {
      ::xsd::cxx::tree::std_ostream_map< char >& om (
        ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

      for (Move::ChangeConstIterator
           b (i.change ().begin ()), e (i.change ().end ());
           b != e; ++b)
      {
        o << ::std::endl << "change: ";
        om.insert (o, *b);
      }
    }

    if (i.extension ())
    {
      o << ::std::endl << "extension: " << *i.extension ();
    }

    o << ::std::endl << "from: " << i.from ();
    o << ::std::endl << "to: " << i.to ();
    o << ::std::endl << "id: " << i.id ();
    o << ::std::endl << "default: " << i.default_ ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Move& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // change
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (Move::ChangeConstIterator
           b (i.change ().begin ()), n (i.change ().end ());
           b != n; ++b)
      {
        if (typeid (Move::ChangeType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "change",
              "artofsequence.org/aosl/1.0",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "change",
            "artofsequence.org/aosl/1.0",
            true, true, e, *b);
      }
    }

    // extension
    //
    if (i.extension ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "extension",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.extension ();
    }

    // from
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "from",
          e));

      a << i.from ();
    }

    // to
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "to",
          e));

      a << i.to ();
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // default
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "default",
          e));

      a << i.default_ ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

