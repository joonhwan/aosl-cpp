// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/target.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Target
  //

  Target::
  Target ()
  : ::xml_schema::Type (),
    config_ (::xml_schema::Flags (), this),
    player_ (::xml_schema::Flags (), this),
    platform_ (::xml_schema::Flags (), this),
    website_ (::xml_schema::Flags (), this)
  {
  }

  Target::
  Target (const Target& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    config_ (x.config_, f, this),
    player_ (x.player_, f, this),
    platform_ (x.platform_, f, this),
    website_ (x.website_, f, this)
  {
  }

  Target::
  Target (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    config_ (f, this),
    player_ (f, this),
    platform_ (f, this),
    website_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Target::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // config
      //
      if (n.name () == "config" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< ConfigType > r (
          ConfigTraits::create (i, f, this));

        if (!this->config_)
        {
          this->config_.set (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "player" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< PlayerType > r (
          PlayerTraits::create (i, f, this));

        this->player_.set (r);
        continue;
      }

      if (n.name () == "platform" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< PlatformType > r (
          PlatformTraits::create (i, f, this));

        this->platform_.set (r);
        continue;
      }

      if (n.name () == "website" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< WebsiteType > r (
          WebsiteTraits::create (i, f, this));

        this->website_.set (r);
        continue;
      }
    }
  }

  Target* Target::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Target (*this, f, c);
  }

  Target::
  ~Target ()
  {
  }

  bool
  operator== (const Target& x, const Target& y)
  {
    if (!(x.config () == y.config ()))
      return false;

    if (!(x.player () == y.player ()))
      return false;

    if (!(x.platform () == y.platform ()))
      return false;

    if (!(x.website () == y.website ()))
      return false;

    return true;
  }

  bool
  operator!= (const Target& x, const Target& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Target& i)
  {
    if (i.config ())
    {
      o << ::std::endl << "config: " << *i.config ();
    }

    if (i.player ())
    {
      o << ::std::endl << "player: " << *i.player ();
    }

    if (i.platform ())
    {
      o << ::std::endl << "platform: " << *i.platform ();
    }

    if (i.website ())
    {
      o << ::std::endl << "website: " << *i.website ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Target& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // config
    //
    if (i.config ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "config",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.config ();
    }

    // player
    //
    if (i.player ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "player",
          e));

      a << *i.player ();
    }

    // platform
    //
    if (i.platform ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "platform",
          e));

      a << *i.platform ();
    }

    // website
    //
    if (i.website ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "website",
          e));

      a << *i.website ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

