// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/properties_stream_object.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Properties_stream_object
  //

  const Properties_stream_object::BeginType Properties_stream_object::begin_default_value_ (
    "0%");

  const Properties_stream_object::EndType Properties_stream_object::end_default_value_ (
    "100%");

  const Properties_stream_object::ControllerType Properties_stream_object::controller_default_value_ (
    "none");

  const Properties_stream_object::ActivationType Properties_stream_object::activation_default_value_ (
    "reset");

  Properties_stream_object::
  Properties_stream_object ()
  : ::xml_schema::Type (),
    begin_ (begin_default_value (), ::xml_schema::Flags (), this),
    end_ (end_default_value (), ::xml_schema::Flags (), this),
    loop_ (loop_default_value (), ::xml_schema::Flags (), this),
    interval_ (interval_default_value (), ::xml_schema::Flags (), this),
    controller_ (controller_default_value (), ::xml_schema::Flags (), this),
    activation_ (activation_default_value (), ::xml_schema::Flags (), this)
  {
  }

  Properties_stream_object::
  Properties_stream_object (const Properties_stream_object& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    begin_ (x.begin_, f, this),
    end_ (x.end_, f, this),
    loop_ (x.loop_, f, this),
    interval_ (x.interval_, f, this),
    controller_ (x.controller_, f, this),
    activation_ (x.activation_, f, this)
  {
  }

  Properties_stream_object::
  Properties_stream_object (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    begin_ (f, this),
    end_ (f, this),
    loop_ (f, this),
    interval_ (f, this),
    controller_ (f, this),
    activation_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void Properties_stream_object::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "begin" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< BeginType > r (
          BeginTraits::create (i, f, this));

        this->begin_.set (r);
        continue;
      }

      if (n.name () == "end" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< EndType > r (
          EndTraits::create (i, f, this));

        this->end_.set (r);
        continue;
      }

      if (n.name () == "loop" && n.namespace_ ().empty ())
      {
        this->loop_.set (LoopTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "interval" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IntervalType > r (
          IntervalTraits::create (i, f, this));

        this->interval_.set (r);
        continue;
      }

      if (n.name () == "controller" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ControllerType > r (
          ControllerTraits::create (i, f, this));

        this->controller_.set (r);
        continue;
      }

      if (n.name () == "activation" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ActivationType > r (
          ActivationTraits::create (i, f, this));

        this->activation_.set (r);
        continue;
      }
    }

    if (!begin_.present ())
    {
      this->begin_.set (begin_default_value ());
    }

    if (!end_.present ())
    {
      this->end_.set (end_default_value ());
    }

    if (!loop_.present ())
    {
      this->loop_.set (loop_default_value ());
    }

    if (!interval_.present ())
    {
      this->interval_.set (interval_default_value ());
    }

    if (!controller_.present ())
    {
      this->controller_.set (controller_default_value ());
    }

    if (!activation_.present ())
    {
      this->activation_.set (activation_default_value ());
    }
  }

  Properties_stream_object* Properties_stream_object::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Properties_stream_object (*this, f, c);
  }

  Properties_stream_object::
  ~Properties_stream_object ()
  {
  }

  bool
  operator== (const Properties_stream_object& x, const Properties_stream_object& y)
  {
    if (!(x.begin () == y.begin ()))
      return false;

    if (!(x.end () == y.end ()))
      return false;

    if (!(x.loop () == y.loop ()))
      return false;

    if (!(x.interval () == y.interval ()))
      return false;

    if (!(x.controller () == y.controller ()))
      return false;

    if (!(x.activation () == y.activation ()))
      return false;

    return true;
  }

  bool
  operator!= (const Properties_stream_object& x, const Properties_stream_object& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Properties_stream_object& i)
  {
    o << ::std::endl << "begin: " << i.begin ();
    o << ::std::endl << "end: " << i.end ();
    o << ::std::endl << "loop: " << i.loop ();
    o << ::std::endl << "interval: " << i.interval ();
    o << ::std::endl << "controller: " << i.controller ();
    o << ::std::endl << "activation: " << i.activation ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Properties_stream_object& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // begin
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "begin",
          e));

      a << i.begin ();
    }

    // end
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "end",
          e));

      a << i.end ();
    }

    // loop
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "loop",
          e));

      a << i.loop ();
    }

    // interval
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "interval",
          e));

      a << i.interval ();
    }

    // controller
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "controller",
          e));

      a << i.controller ();
    }

    // activation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "activation",
          e));

      a << i.activation ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

