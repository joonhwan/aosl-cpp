// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/story.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Story
  //

  Story::
  Story (const StagesType& stages,
         const MovesType& moves,
         const BeginType& begin)
  : ::xml_schema::Type (),
    properties_ (::xml_schema::Flags (), this),
    navigation_ (::xml_schema::Flags (), this),
    stages_ (stages, ::xml_schema::Flags (), this),
    moves_ (moves, ::xml_schema::Flags (), this),
    begin_ (begin, ::xml_schema::Flags (), this)
  {
  }

  Story::
  Story (::std::auto_ptr< StagesType >& stages,
         ::std::auto_ptr< MovesType >& moves,
         const BeginType& begin)
  : ::xml_schema::Type (),
    properties_ (::xml_schema::Flags (), this),
    navigation_ (::xml_schema::Flags (), this),
    stages_ (stages, ::xml_schema::Flags (), this),
    moves_ (moves, ::xml_schema::Flags (), this),
    begin_ (begin, ::xml_schema::Flags (), this)
  {
  }

  Story::
  Story (const Story& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    properties_ (x.properties_, f, this),
    navigation_ (x.navigation_, f, this),
    stages_ (x.stages_, f, this),
    moves_ (x.moves_, f, this),
    begin_ (x.begin_, f, this)
  {
  }

  Story::
  Story (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    properties_ (f, this),
    navigation_ (f, this),
    stages_ (f, this),
    moves_ (f, this),
    begin_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Story::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // properties
      //
      if (n.name () == "properties" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< PropertiesType > r (
          PropertiesTraits::create (i, f, this));

        if (!this->properties_)
        {
          this->properties_.set (r);
          continue;
        }
      }

      // navigation
      //
      if (n.name () == "navigation" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< NavigationType > r (
          NavigationTraits::create (i, f, this));

        if (!this->navigation_)
        {
          this->navigation_.set (r);
          continue;
        }
      }

      // stages
      //
      if (n.name () == "stages" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< StagesType > r (
          StagesTraits::create (i, f, this));

        if (!stages_.present ())
        {
          this->stages_.set (r);
          continue;
        }
      }

      // moves
      //
      if (n.name () == "moves" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< MovesType > r (
          MovesTraits::create (i, f, this));

        if (!moves_.present ())
        {
          this->moves_.set (r);
          continue;
        }
      }

      break;
    }

    if (!stages_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "stages",
        "artofsequence.org/aosl/1.0");
    }

    if (!moves_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "moves",
        "artofsequence.org/aosl/1.0");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "begin" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< BeginType > r (
          BeginTraits::create (i, f, this));

        this->begin_.set (r);
        continue;
      }
    }

    if (!begin_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "begin",
        "");
    }
  }

  Story* Story::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Story (*this, f, c);
  }

  Story::
  ~Story ()
  {
  }

  bool
  operator== (const Story& x, const Story& y)
  {
    if (!(x.properties () == y.properties ()))
      return false;

    if (!(x.navigation () == y.navigation ()))
      return false;

    if (!(x.stages () == y.stages ()))
      return false;

    if (!(x.moves () == y.moves ()))
      return false;

    if (!(x.begin () == y.begin ()))
      return false;

    return true;
  }

  bool
  operator!= (const Story& x, const Story& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Story& i)
  {
    if (i.properties ())
    {
      o << ::std::endl << "properties: " << *i.properties ();
    }

    if (i.navigation ())
    {
      o << ::std::endl << "navigation: " << *i.navigation ();
    }

    o << ::std::endl << "stages: " << i.stages ();
    o << ::std::endl << "moves: " << i.moves ();
    o << ::std::endl << "begin: " << i.begin ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Story& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // properties
    //
    if (i.properties ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "properties",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.properties ();
    }

    // navigation
    //
    if (i.navigation ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "navigation",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.navigation ();
    }

    // stages
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "stages",
          "artofsequence.org/aosl/1.0",
          e));

      s << i.stages ();
    }

    // moves
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "moves",
          "artofsequence.org/aosl/1.0",
          e));

      s << i.moves ();
    }

    // begin
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "begin",
          e));

      a << i.begin ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

