// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/aosl.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Object_group >
  _xsd_group_element_factory_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "group",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Object_special >
  _xsd_specialobject_element_factory_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "specialobject",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Object_sprite >
  _xsd_sprite_element_factory_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "sprite",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Object_video >
  _xsd_video_element_factory_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "video",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Object_audio >
  _xsd_audio_element_factory_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "audio",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Change_special >
  _xsd_specialchange_element_factory_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "specialchange",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Change_activate >
  _xsd_activate_element_factory_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "activate",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Change_deactivate >
  _xsd_deactivate_element_factory_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "deactivate",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Change_switch >
  _xsd_switch__element_factory_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "switch",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Change_transform >
  _xsd_transform_element_factory_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "transform",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Event_input >
  _xsd_input_element_factory_init (
    "event",
    "artofsequence.org/aosl/1.0",
    "input",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Event_signal >
  _xsd_signal_element_factory_init (
    "event",
    "artofsequence.org/aosl/1.0",
    "signal",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::aosl::Event_selection >
  _xsd_selection_element_factory_init (
    "event",
    "artofsequence.org/aosl/1.0",
    "selection",
    "artofsequence.org/aosl/1.0");
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::aosl::Sequence > r (
      ::aosl::parse_sequence (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::aosl::Sequence > r (
      ::aosl::parse_sequence (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::aosl::Sequence > r (
      ::aosl::parse_sequence (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::aosl::parse_sequence (isrc, f, p);
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::aosl::parse_sequence (isrc, h, f, p);
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::aosl::parse_sequence (isrc, h, f, p);
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::aosl::parse_sequence (isrc, f, p);
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::aosl::parse_sequence (isrc, h, f, p);
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::aosl::parse_sequence (isrc, h, f, p);
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::aosl::Sequence > r (
      ::aosl::parse_sequence (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::aosl::Sequence > r (
      ::aosl::parse_sequence (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::aosl::Sequence > r (
      ::aosl::parse_sequence (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::aosl::Sequence > r (
        ::aosl::parse_sequence (
          c, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "sequence" &&
        n.namespace_ () == "artofsequence.org/aosl/1.0")
    {
      ::std::auto_ptr< ::aosl::Sequence > r (
        ::xsd::cxx::tree::traits< ::aosl::Sequence, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "sequence",
      "artofsequence.org/aosl/1.0");
  }

  ::std::auto_ptr< ::aosl::Sequence >
  parse_sequence (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "sequence" &&
        n.namespace_ () == "artofsequence.org/aosl/1.0")
    {
      ::std::auto_ptr< ::aosl::Sequence > r (
        ::xsd::cxx::tree::traits< ::aosl::Sequence, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "sequence",
      "artofsequence.org/aosl/1.0");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  serialize_sequence (::std::ostream& o,
                      const ::aosl::Sequence& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::aosl::serialize_sequence (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serialize_sequence (::std::ostream& o,
                      const ::aosl::Sequence& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::aosl::serialize_sequence (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serialize_sequence (::std::ostream& o,
                      const ::aosl::Sequence& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::aosl::serialize_sequence (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serialize_sequence (::xercesc::XMLFormatTarget& t,
                      const ::aosl::Sequence& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::aosl::serialize_sequence (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serialize_sequence (::xercesc::XMLFormatTarget& t,
                      const ::aosl::Sequence& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::aosl::serialize_sequence (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serialize_sequence (::xercesc::XMLFormatTarget& t,
                      const ::aosl::Sequence& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::aosl::serialize_sequence (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serialize_sequence (::xercesc::DOMDocument& d,
                      const ::aosl::Sequence& s,
                      ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "sequence" &&
        n.namespace_ () == "artofsequence.org/aosl/1.0")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sequence",
        "artofsequence.org/aosl/1.0");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  serialize_sequence (const ::aosl::Sequence& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "sequence",
        "artofsequence.org/aosl/1.0",
        m, f));

    ::aosl::serialize_sequence (*d, s, f);
    return d;
  }

  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Object_group >
  _xsd_group_element_serializer_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "group",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Object_special >
  _xsd_specialobject_element_serializer_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "specialobject",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Object_sprite >
  _xsd_sprite_element_serializer_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "sprite",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Object_video >
  _xsd_video_element_serializer_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "video",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Object_audio >
  _xsd_audio_element_serializer_init (
    "object",
    "artofsequence.org/aosl/1.0",
    "audio",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Change_special >
  _xsd_specialchange_element_serializer_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "specialchange",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Change_activate >
  _xsd_activate_element_serializer_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "activate",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Change_deactivate >
  _xsd_deactivate_element_serializer_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "deactivate",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Change_switch >
  _xsd_switch__element_serializer_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "switch",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Change_transform >
  _xsd_transform_element_serializer_init (
    "change",
    "artofsequence.org/aosl/1.0",
    "transform",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Event_input >
  _xsd_input_element_serializer_init (
    "event",
    "artofsequence.org/aosl/1.0",
    "input",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Event_signal >
  _xsd_signal_element_serializer_init (
    "event",
    "artofsequence.org/aosl/1.0",
    "signal",
    "artofsequence.org/aosl/1.0");


  static
  const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::aosl::Event_selection >
  _xsd_selection_element_serializer_init (
    "event",
    "artofsequence.org/aosl/1.0",
    "selection",
    "artofsequence.org/aosl/1.0");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

