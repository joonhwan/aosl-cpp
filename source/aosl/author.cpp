// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema
// to C++ data binding compiler, in the Proprietary License mode.
// You should have received a proprietary license from Code Synthesis
// Tools CC prior to generating this code. See the license text for
// conditions.
//

// Begin prologue.
//

#define AOSLCPP_SOURCE 

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "aosl/author.hpp"

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

namespace aosl
{
  // Author
  //

  Author::
  Author ()
  : ::xml_schema::Type (),
    name_ (::xml_schema::Flags (), this),
    about_ (::xml_schema::Flags (), this),
    comments_ (::xml_schema::Flags (), this),
    website_ (::xml_schema::Flags (), this),
    email_ (::xml_schema::Flags (), this),
    infos_ (::xml_schema::Flags (), this)
  {
  }

  Author::
  Author (const Author& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    name_ (x.name_, f, this),
    about_ (x.about_, f, this),
    comments_ (x.comments_, f, this),
    website_ (x.website_, f, this),
    email_ (x.email_, f, this),
    infos_ (x.infos_, f, this)
  {
  }

  Author::
  Author (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    name_ (f, this),
    about_ (f, this),
    comments_ (f, this),
    website_ (f, this),
    email_ (f, this),
    infos_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void Author::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< NameType > r (
          NameTraits::create (i, f, this));

        if (!this->name_)
        {
          this->name_.set (r);
          continue;
        }
      }

      // about
      //
      if (n.name () == "about" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< AboutType > r (
          AboutTraits::create (i, f, this));

        if (!this->about_)
        {
          this->about_.set (r);
          continue;
        }
      }

      // comments
      //
      if (n.name () == "comments" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< CommentsType > r (
          CommentsTraits::create (i, f, this));

        if (!this->comments_)
        {
          this->comments_.set (r);
          continue;
        }
      }

      // website
      //
      if (n.name () == "website" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< WebsiteType > r (
          WebsiteTraits::create (i, f, this));

        if (!this->website_)
        {
          this->website_.set (r);
          continue;
        }
      }

      // email
      //
      if (n.name () == "email" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< EmailType > r (
          EmailTraits::create (i, f, this));

        if (!this->email_)
        {
          this->email_.set (r);
          continue;
        }
      }

      // infos
      //
      if (n.name () == "infos" && n.namespace_ () == "artofsequence.org/aosl/1.0")
      {
        ::std::auto_ptr< InfosType > r (
          InfosTraits::create (i, f, this));

        if (!this->infos_)
        {
          this->infos_.set (r);
          continue;
        }
      }

      break;
    }
  }

  Author* Author::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Author (*this, f, c);
  }

  Author::
  ~Author ()
  {
  }

  bool
  operator== (const Author& x, const Author& y)
  {
    if (!(x.name () == y.name ()))
      return false;

    if (!(x.about () == y.about ()))
      return false;

    if (!(x.comments () == y.comments ()))
      return false;

    if (!(x.website () == y.website ()))
      return false;

    if (!(x.email () == y.email ()))
      return false;

    if (!(x.infos () == y.infos ()))
      return false;

    return true;
  }

  bool
  operator!= (const Author& x, const Author& y)
  {
    return !(x == y);
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace aosl
{
  ::std::ostream&
  operator<< (::std::ostream& o, const Author& i)
  {
    if (i.name ())
    {
      o << ::std::endl << "name: " << *i.name ();
    }

    if (i.about ())
    {
      o << ::std::endl << "about: " << *i.about ();
    }

    if (i.comments ())
    {
      o << ::std::endl << "comments: " << *i.comments ();
    }

    if (i.website ())
    {
      o << ::std::endl << "website: " << *i.website ();
    }

    if (i.email ())
    {
      o << ::std::endl << "email: " << *i.email ();
    }

    if (i.infos ())
    {
      o << ::std::endl << "infos: " << *i.infos ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace aosl
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace aosl
{
  void
  operator<< (::xercesc::DOMElement& e, const Author& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // name
    //
    if (i.name ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.name ();
    }

    // about
    //
    if (i.about ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "about",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.about ();
    }

    // comments
    //
    if (i.comments ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "comments",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.comments ();
    }

    // website
    //
    if (i.website ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "website",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.website ();
    }

    // email
    //
    if (i.email ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "email",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.email ();
    }

    // infos
    //
    if (i.infos ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "infos",
          "artofsequence.org/aosl/1.0",
          e));

      s << *i.infos ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

