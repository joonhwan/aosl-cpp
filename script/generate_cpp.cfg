# Configuration options for xsd to c++ code generation :  #
###########################################################


# We need to set the namespace of the generated code.
--namespace-map artofsequence.org/aosl/1.0=aosl

# Put all the code in an isolated folder
--output-dir ../source/aosl

# But in generated code, headers should be found the include folder
--include-prefix aosl/

# Header files suffix
--hxx-suffix .hpp

# Inline files suffix 
--ixx-suffix .inl 

# Source files suffix 
--cxx-suffix .cpp 

# Forward file suffix
--fwd-suffix _forward.hpp

# Generated include files guards should be prefixed
--guard-prefix AOSLCPP_AOSL_

# We need to add export/import symbols to make it a dll
#--export-xml-schema 

# The export/import symbol to use
#--export-symbol AOSLCPP_API

# We use MIT license, not GPL!
--proprietary-license

# Insert our licence?

# Include common compilation config header
--hxx-prologue-file generated_header_prologue.txt
--cxx-prologue-file generated_source_prologue.txt

# Put one header/cpp by generated C++ type
--file-per-type 

# We want simple functions to be inlined (generate inline files) for performance!
--generate-inline

# We want some serialization functions!
--generate-serialization

# We want some output stream operators!
--generate-ostream

# We want some documentation to be generated from annotations!
--generate-doxygen

# We want some comparison functions! Different elements will have different ids anyway.
--generate-comparison

# DO We want to have default constructors even for types that require some informations?
#--generate-default-ctor

# We want functions to detach objects from their parents and move them around.
#--generate-detach

# We want parsing functions even for "any" wildcard types, for extension - require to initialize the Xerses runtime by hand
--generate-wildcard

# We want a header with forward declarations of all generated types
--generate-forward

# We want substitution group/inheritance to be used in the generated code!
--generate-polymorphic

# We want generated type names to be CamelCase
--type-naming ucc

# We want generated functions to be k&r
--function-naming knr


# Only the <sequence> element is the root element
--root-element sequence

# Allow to have a <library> as root element in a separate file
--root-element library

# Allow to have a <meta> as root element in a separate file
--root-element meta 


# Parser functions have to be prefixed
--parser-regex /(.+)/parse_$1/

# Serializer functions have to be prefixed
--serializer-regex /(.+)/serialize_$1/


# Display some stats
--show-sloc 

# Create a list generated files
--file-list generated_files.log

# Help Intellisense (if using MSVC)
#--generate-intellisense